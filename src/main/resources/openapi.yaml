openapi: 3.0.3
info:
  title: Emergency Aid Client Backend
  description: Emergency Aid Client Backend for managing responders to health emergencies and patient medical data.
  version: 1.0.0
servers:
  - url: http://localhost:8080/
    description: Production server
  - url: http://localhost:8080/
    description: Development server

paths:
  /hello:
    get:
      operationId: getHelloMessage
      summary: Basic hello endpoint
      responses:
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello :)"
        "500":
          description: Unexpected error encountered
          content:
            text/plain:
              schema:
                type: string
                example: "Unexpected error encountered"

  /register/user:
    post:
      operationId: registerUser
      summary: Register a new user
      description: Creates a new user account with the provided email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: User already exists for a provided email
          content:
            text/plain:
              schema:
                type: string
                example: "User already exists for this email"
        "500":
          description: Unexpected error encountered while registering a user
          content:
            text/plain:
              schema:
                type: string
                example: "Something went wrong"

  /login:
    post:
      operationId: loginUser
      summary: Login a user
      description: Authenticate a user with the provided email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"
      responses:
        "200":
          description: Successful login attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserResponse"
        "401":
          description: Unauthorized login attempt
          content:
            text/plain:
              schema:
                type: string
                example: "Invalid email or password"
        "500":
          description: Unexpected server error encountered during login
          content:
            text/plain:
              schema:
                type: string
                example: "Unexpected error encountered during login"

components:
  schemas:
    # User Attributes
    UserId:
      type: string
      format: uuid
      description: Unique identifier for the user.
      example: "9101d183-26e6-45b7-a8c4-25f24fdb36fa"
      readOnly: true # immutable

    UserEmail:
      type: string
      format: email
      description: The email address of the user.
      example: "user@example.com"

    UserPassword:
      type: string
      format: password
      description: A secure user password that will be hashed before storage.
      example: "securePassword123*"
      writeOnly: true # should not view password in responses

    UserJwtToken:
      type: string
      description: JWT token for user authentication
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # Patient Attributes
    PatientId:
      type: string
      format: uuid
      description: Unique identifier for the patient.
      example: "9101d183-26e6-45b7-a8c4-25f24fdb36fa"
      readOnly: true # immutable

    PatientFirstName:
      type: string
      description: First name of the Patient.
      example: "Bob"

    PatientLastName:
      type: string
      description: Last name of the Patient.
      example: "Ross"

    PatientPhoneNumber:
      type: string
      format: phone
      description: Phone number of the patient.
      example: "+18001234567"

    PatientPharmaId:
      type: string
      description: Patient ID associated with Pharmaid.
      example: "9101d183-26e6-45b7-a8c4-25f24fdb36fa"
      readOnly: true

    # Entity Models
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        email:
          $ref: "#/components/schemas/UserEmail"
        hashedPassword:
          $ref: "#/components/schemas/UserPassword"

    Patient:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PatientId"
        firstName:
          $ref: "#/components/schemas/PatientFirstName"
        lastName:
          $ref: "#/components/schemas/PatientLastName"
        phoneNumber:
          $ref: "#/components/schemas/PatientPhoneNumber"
        patientPharmaId:
          $ref: "#/components/schemas/PatientPharmaId"

    # Request Objects
    RegisterUserRequest:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/UserEmail"
        password:
          $ref: "#/components/schemas/UserPassword"
      required:
        - email
        - password

    LoginUserRequest:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/UserEmail"
        password:
          $ref: "#/components/schemas/UserPassword"
      required:
        - email
        - password

    RegisterPatientRequest:
      type: object
      properties:
        firstName:
          $ref: "#/components/schemas/PatientFirstName"
        lastName:
          $ref: "#/components/schemas/PatientLastName"
        phoneNumber:
          $ref: "#/components/schemas/PatientPhoneNumber"
        pharmaId:
          $ref: "#/components/schemas/PatientPharmaId"
      required:
        - firstName
        - lastName
        - phoneNumber

    # Response objects
    LoginUserResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        email:
          $ref: "#/components/schemas/UserEmail"
        token:
          $ref: "#/components/schemas/UserJwtToken"

  responses:
    UserDoesNotExist:
      description: Provided userId does not exist
      content:
        text/plain:
          schema:
            type: string
            example: "Provided userId does not exist"